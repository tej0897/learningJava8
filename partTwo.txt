Modern Java - Learn Java 8 features by coding it

                    ******

Contents:

    1. Functional Interfaces.
    2. Consumer and BiConsumer Interfaces.
    3. Predicate and BiPredicate Interfaces.
    4. Combining Predicate and Consumer Interfaces.
    5. Function and BiFuncation Interfaces.
    6. Unary and Binary Operators.
    7. Supplier Interface.

_______________________________________________________

Functional Interface:
    An Interface that has only one Abstract method.

    New Functional Interfaces introduced in Java 8:

    1. Consumer - BiConsumer
    2. Predicate - BiPredicate
    3. Function - BiFunction, UnaryOperator, BinaryOperator
    4. Supplier

_______________________________________________________

Consumer Interface:

    Accept an input and perform some operation on that input.

    Example: Accepts an input, performs uppercase operation on it and displays the result.

    IRL Use-case: From List of Students, filter students based on their grade and display them.
    (conditional filtering and displaying them)

    1. Has @FunctionalInterface annotation.
    2. It has one method: accept(T t);
    3. It just accepts an input. Does not provide any output.
    4. It has another method: default
    5. Use "accept()" to pass in the input.

_______________________________________________________

BiConsumer Interface:

    It accepts two inputs, performs some operation on them.

    1. There are two methods in BiConsumer Interface: Accept() and default()

    UseCase:
        a. Takes two input, print values of these two inputs or Multiply and divide the inputs and print the values. (andThen method)
        b. Print Name and Activities of the Student, since it takes two inputs.

_______________________________________________________

Predicate Functional Interface:

    1. It has Boolean method and it accepts input.
    2. It takes input, performs operation and returns a Boolean value.
    3. It has other default methods like "and(), negate(), or(), isEquals()".
    4. Benefit is Code Reuse-ability.
    5. PREDICATE CHAINING:
    Use PredicateAnd to check two conditions like, if the number is divisible by 2 and 5. or() to check if the condition passes any one, negate() to negate the result.

    UseCases:
        1. Check the input number is even or not.
        2. Check if the input is divisible by 2 and 5.
        3. Check the grade level. (greater than 3)
        4. Multiple filtering checks like grade, GPA etc.

_______________________________________________________

Combining Predicate and Consumer:
(IMPORTANT) teaches how to handle instance methods. Check Code.

    UseCase: Listing the Name and Activities based on filtering conditions using Predicate and Consumer.

    We are creating instance methods here instead of static methods. Why?
        Just to show that lambdas work the same irrespective of Instance method or static method.

_______________________________________________________

BiPredicate Functional Interface:

    1. Accepts two inputs and returns boolean output.
    2. Had default methods same as predicate. and, or, negate.

_______________________________________________________

Functional Interface:

    Takes in an input and gives out an output.
    Takes input of one type and produces output of another type. The Type should be specified while creating the Function.

    1. A method in a class. Code a functionality, assign it to a variable and pass it around.
    2. One Abstract method. apply()
    3. 2 default methods, compose() and andThen().

    UseCases:
        1. Takes name as input and performs upperCase operation on it.

        andThen: (executes functions in the order it is mentioned)
            1. perform uppercase operation and then concatenate another string to it.

        Compose: (executes first function where compose is declared and then it executes the other function)
            UseCase: Same as above.

    IRL UseCase:
        1. Map students with their respective grades / GPA.
        2. Filtering students based on their grade using predicate and functional interfaces.

_______________________________________________________

BiFunctional Interface:

    1. Accepts two inputs and gives out one output.
    2. It has only 1 method. andThen()

    UseCase: Map of students and their respective GPAs.

_______________________________________________________

Unary and Binary Operators in Functional Interface.

    Unary Operator: (I/P and O/P are of the same type)

        1. It is a Functional Interface.
        2. It extends "Function" Interface.

    We can use Unary Operator when input and output are of the same type.

    UseCase: Takes a String, concatenates another String.

                        ******

    Binary Operator: Takes two input and gives one output of the same type.

        1. It extends BiFunction Interface.
        2. It has two static methods, minBy() and maxBy().
        3. minBy and maxBy accepts a Comparator().

    UseCase: Take two numbers and perform multiplication.

_______________________________________________________

Supplier Interface:

    Does not take any input, but gives an output.

    1. It has only one method. get()
    2. It returns something to the caller.
    3. Opposite of Consumer Interface.

    UseCase:
        1. Return a Student / List of Students when called.

_______________________________________________________
